# simple_main.py - BOT SIMPLE QUE FUNCIONA GARANTIZADO
import requests
import json
import openai
import os
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import random

# Configurar OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY')

def test_openai():
    """Prueba b√°sica de OpenAI"""
    print("üß™ Probando OpenAI API...")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Di solo 'funciona'"}],
            max_tokens=10
        )
        result = response.choices[0].message.content.strip()
        print(f"‚úÖ OpenAI responde: {result}")
        return True
    except Exception as e:
        print(f"‚ùå Error OpenAI: {e}")
        return False

def get_simple_content():
    """Contenido b√°sico para crear producto"""
    print("üìù Generando contenido base...")
    
    topics = [
        "10 secretos de emprendimiento que todo empresario debe conocer",
        "Estrategias de productividad para profesionales exitosos", 
        "Gu√≠a completa de marketing digital para principiantes",
        "T√©cnicas de ventas que realmente funcionan",
        "Como crear un negocio online desde cero"
    ]
    
    selected_topic = random.choice(topics)
    print(f"‚úÖ Tema seleccionado: {selected_topic}")
    return selected_topic

def create_product_simple(topic):
    """Crear producto con IA - versi√≥n simple"""
    print("ü§ñ Creando producto con IA...")
    
    prompt = f"""Crea un ebook corto sobre: "{topic}"

Devuelve SOLO un JSON con esta estructura:
{{
    "titulo": "T√≠tulo atractivo m√°ximo 60 caracteres",
    "precio": n√∫mero entre 15 y 25,
    "contenido": "Ebook de 8 cap√≠tulos con introducci√≥n y conclusi√≥n. M√≠nimo 1000 palabras.",
    "descripcion": "Descripci√≥n de venta de 100 palabras"
}}

Solo el JSON, nada m√°s."""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2000,
            temperature=0.7
        )
        
        content = response.choices[0].message.content.strip()
        
        # Limpiar respuesta
        if content.startswith('```json'):
            content = content[7:]
        if content.endswith('```'):
            content = content[:-3]
        
        product = json.loads(content)
        print("‚úÖ Producto creado por IA")
        return product
        
    except Exception as e:
        print(f"‚ùå Error IA: {e}")
        return {
            "titulo": f"Gu√≠a Pr√°ctica: {topic[:40]}...",
            "precio": random.randint(15, 25),
            "contenido": f"Esta es una gu√≠a completa sobre {topic}. Incluye estrategias probadas y consejos pr√°cticos para obtener resultados reales.",
            "descripcion": f"Gu√≠a pr√°ctica sobre {topic} con consejos de expertos y t√©cnicas probadas."
        }

def create_simple_pdf(product):
    """Crear PDF b√°sico pero funcional"""
    print("üìÑ Creando PDF...")
    
    filename = f"producto_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    
    try:
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter
        
        # T√≠tulo
        c.setFont("Helvetica-Bold", 18)
        c.drawString(50, height-100, product['titulo'][:80])
        
        # Fecha
        c.setFont("Helvetica", 12)
        c.drawString(50, height-130, f"Creado: {datetime.now().strftime('%d/%m/%Y')}")
        c.drawString(50, height-150, f"Precio: ‚Ç¨{product['precio']}")
        
        # Contenido
        c.setFont("Helvetica", 10)
        y_position = height - 200
        
        # Dividir contenido en l√≠neas
        content = product['contenido']
        words = content.split()
        line = ""
        
        for word in words[:500]:  # M√°ximo 500 palabras
            if len(line + word) < 80:
                line += word + " "
            else:
                if y_position < 50:
                    c.showPage()
                    y_position = height - 50
                    c.setFont("Helvetica", 10)
                
                c.drawString(50, y_position, line.strip())
                line = word + " "
                y_position -= 15
        
        # √öltima l√≠nea
        if line:
            c.drawString(50, y_position, line.strip())
        
        c.save()
        print(f"‚úÖ PDF creado: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå Error PDF: {e}")
        return None

def create_instructions(product, pdf_file):
    """Crear instrucciones de venta"""
    print("üìã Creando instrucciones...")
    
    instructions_file = f"INSTRUCCIONES_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    content = f"""
üõçÔ∏è PRODUCTO LISTO PARA VENDER
==============================

üìä INFORMACI√ìN DEL PRODUCTO:
‚Ä¢ T√≠tulo: {product['titulo']}
‚Ä¢ Precio sugerido: ‚Ç¨{product['precio']}
‚Ä¢ Archivo: {pdf_file}
‚Ä¢ Creado: {datetime.now().strftime('%d/%m/%Y %H:%M')}

üåê D√ìNDE VENDER:
1. ETSY (Recomendado):
   - Categor√≠a: Digital Downloads
   - Tags: gu√≠a, PDF, emprendimiento, negocio, digital
   - Descripci√≥n: {product['descripcion']}

2. GUMROAD:
   - Categor√≠a: Business
   - Precio: ‚Ç¨{product['precio']}
   - Descarga autom√°tica

3. TU PROPIA WEB:
   - Usar PayPal para pagos
   - Env√≠o manual del PDF

üì¢ MARKETING B√ÅSICO:
‚Ä¢ Publica en LinkedIn, Instagram, Facebook
‚Ä¢ Usa hashtags: #emprendimiento #guiaPDF #negociodigital
‚Ä¢ Ofrece descuento por lanzamiento

üí∞ PROYECCI√ìN:
‚Ä¢ 2-5 ventas/mes = ‚Ç¨{product['precio']*2}-‚Ç¨{product['precio']*5}/mes
‚Ä¢ Sin costos adicionales = 100% ganancia

üéØ SIGUIENTE PASO:
1. Descargar el PDF del repositorio
2. Subir a Etsy/Gumroad
3. Promocionar en redes sociales
4. ¬°Empezar a vender!

==============================
Bot ejecutado: {datetime.now()}
"""
    
    try:
        with open(instructions_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Instrucciones creadas: {instructions_file}")
        return instructions_file
    except Exception as e:
        print(f"‚ùå Error instrucciones: {e}")
        return None

def main():
    """Funci√≥n principal - SIMPLE Y EFECTIVA"""
    print(f"""
ü§ñ ==========================================
   BOT SIMPLE - INCOME PRODUCTS
   Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ ==========================================
    """)
    
    try:
        # 1. Probar OpenAI
        if not test_openai():
            print("‚ùå OpenAI no funciona, saliendo...")
            return
        
        # 2. Generar contenido
        topic = get_simple_content()
        
        # 3. Crear producto con IA
        product = create_product_simple(topic)
        print(f"üì¶ Producto: {product['titulo']}")
        print(f"üí∞ Precio: ‚Ç¨{product['precio']}")
        
        # 4. Crear PDF
        pdf_file = create_simple_pdf(product)
        
        # 5. Crear instrucciones
        instructions_file = create_instructions(product, pdf_file)
        
        # 6. Guardar resumen
        summary = {
            "timestamp": datetime.now().isoformat(),
            "producto": product['titulo'],
            "precio": product['precio'],
            "archivos": [pdf_file, instructions_file],
            "estado": "completado"
        }
        
        with open('ultimo_producto.json', 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        print(f"""
üéâ ==========================================
   ¬°PRODUCTO CREADO EXITOSAMENTE!
   
   üìÑ PDF: {pdf_file}
   üìã Instrucciones: {instructions_file}
   üí∞ Valor: ‚Ç¨{product['precio']}
   
   üöÄ LISTO PARA VENDER EN ETSY/GUMROAD
üéâ ==========================================
        """)
        
    except Exception as e:
        print(f"üí• Error cr√≠tico: {e}")
        
        # Crear archivo de error
        with open('error_log.txt', 'w') as f:
            f.write(f"Error: {e}\nFecha: {datetime.now()}\n")

if __name__ == "__main__":
    main()
